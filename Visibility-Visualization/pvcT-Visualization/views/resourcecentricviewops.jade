doctype html
html
  head
    title MultiView : Resource-Centric View
    style(type='text/css').
      body {
      color: #d3d3d3;
      font: 12pt arial;
      background-color: #222222;
      }
      #mynetwork {
      position: absolute;
      margin: auto;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 1px solid lightgray;
      background: #ffffff;
      }
      .sdncontrollerdiv{
      position: absolute;
      top: 30px;
      left: 30px;
      width: 240px;
      height: 135px;
      font-size: 18px;
      opacity: 0.7;
      border: 1px solid #bfbfbf;
      background: #f5f5ef;
      }
      .sdncontrollerheaddiv{
      position: relative;
      top: 5px;
      left: 5px;
      width: 230px;
      height: 30px;
      border: 1px solid #999999;
      background: #ff1a66;
      padding: 5px 0;
      text-align: center;
      }
      .sdncontrollerbodydiv{
      position: relative;
      top: 5px;
      left: 5px;
      width: 230px;
      height: 80px;
      border: 1px solid #999999;
      background: #ffffff;
      overflow-y:scroll;
      }
      .controllertable {
      width: 100%;
      background-color: #f1f1c1;
      }
      .controllertable tr:nth-child(even) {
      background-color: #eee;
      }
      .controllertable tr:nth-child(odd) {
      background-color: #fff;
      }
      .controllertable th {
      color: white;
      background-color: black;
      }
    script(src='../node_modules/jquery/dist/jquery.min.js')
    script(type='text/javascript', src='javascripts/vis.js')
    link(href='stylesheets/vis.css', rel='stylesheet', type='text/css')
    link(type='text/css', rel='stylesheet', href='../node_modules/opentip/css/opentip.css')
    script(type='text/javascript', src='../node_modules/opentip/downloads/opentip-jquery.js')
    script(type='text/javascript').
      var serverIP="103.22.221.56";
      var serverPort="3011";
      var session_username = sessionStorage.getItem('ss_user_name');
      if (session_username === null){
      window.location.replace("http://"+serverIP+":"+serverPort+"/login");
      }
      //var boxes = JSON.parse(data);
      // Receive Active Boxes List
      var bboxList         = !{bboxList};
      var sboxList         = !{sboxList};
      var cboxList         = !{cboxList};
      var oboxList         = !{oboxList};
      var bswitchList      = !{bswitchList};
      var sswitchList      = !{sswitchList};
      var cswitchList      = !{cswitchList};
      var oswitchList      = !{oswitchList};
      var instanceList     = !{instanceList};
      var iotHostList      =  !{iotHostList};
      var bovsBridgeStatus = !{bovsBridgeStatus};
      var sovsBridgeStatus = !{sovsBridgeStatus};
      var covsBridgeStatus = !{covsBridgeStatus};
      var oovsBridgeStatus = !{oovsBridgeStatus};
      var controllerList   = !{controllerList};
      var bBoxNodeID=0, sBoxNodeID=0, cBoxNodeID=0, oBoxNodeID=0, bswitchNodeID=0, sswitchNodeID=0, cswitchNodeID =0, oswitchNodeID=0, instanceNodeID=0, hostNodeID=0;
      var index=0, bBoxLevel=1, sBoxLevel=1, oBoxLevel=0, cBoxLevel=0, bSwitchLevel=0, sSwitchLevel=0, oSwitchLevel=0, cSwitchLevel=0, instanceLevel=0, hostLevel=0, workloadlevel=0;
      var nodes = null, edges = null, network = null;
      var DIR = 'images/';
      var EDGE_LENGTH_MAIN = 350, EDGE_LENGTH_SUB   = 150;
      var BridgeLinkColor = 'GREEN', BridgeNodeColor = '#3399ff';
      var LENGTH_SERVER  = 150, LENGTH_SUB = 50, WIDTH_SCALE = 2, GREEN = 'green', RED = '#C5000B', ORANGE = 'orange', GRAY = 'gray', BLACK = '#2B1B17';
      // Called when the Visualization API is loaded.
      function draw() {
      // Create a data table with nodes.
      nodes = [];
      // Create a data table with links.
      edges = [];
      //Add network Node
      nodes.push({id: 1, label: '                                   Underlay Networks                                   ', font: {size: 50, color: '#ffffff'},shape: 'box', color: BridgeNodeColor, level:0, fixed: false, physics:true});
      //nodes.push({id: 1, image: DIR + 'tein.png', shape: 'image', level:0, fixed: true, physics:true});
      //nodes.push({id: 1001, x: x, y: y, label: 'Desktop', group: 'desktop', value: 4, fixed: false, physics:false});
      //edges.push({from: 1000, to: 1001, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 6, color: GREEN, label: '0.71 mbps'});
      //Draw KOREN Boxes
      for (var i in sboxList)
      {
      index=index+1;
      sBoxNodeID = index * 1000;
      console.log('S-Box: '+sboxList[i].boxID+ ' NodeID: '+sBoxNodeID);
      if (sboxList[i].management_ip_status == 'GREEN')
      {
      nodes.push({id: sBoxNodeID, label: sboxList[i].boxName, image: DIR + 'boxgreen.png', shape: 'image', level:sBoxLevel, fixed: false, physics:false});
      edges.push({from: 1, to: sBoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: sboxList[i].data_ip_status, label: '0.71 mbps'});
      //console.log(sboxList[i].management_ip_status);
      //Draw the OVS Bridges
      sswitchNodeID = sBoxNodeID;
      for (var j in sswitchList)
      {
      if (sswitchList[j].bridge !== 'br-ex')
      {
      for (var a in sovsBridgeStatus)
      {
      if (sovsBridgeStatus[a].bridge == sswitchList[j].bridge && sovsBridgeStatus[a].boxID == sboxList[i].boxID)
      {
      BridgeLinkColor = sovsBridgeStatus[a].status;
      BridgeNodeColor = sovsBridgeStatus[a].status;
      console.log('  S-Box: '+sboxList[i].boxID+ ' Bridge: '+sovsBridgeStatus[a].bridge + ' Status: '+BridgeLinkColor);
      break;
      }
      }
      sswitchNodeID = sswitchNodeID + 1;
      if (sswitchNodeID != sBoxNodeID + 1)
      {
      sSwitchLevel=sSwitchLevel + 1;
      nodes.push({id: sswitchNodeID, label: sswitchList[j].bridge, box: sboxList[i].boxID, level:sSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: sswitchNodeID-1, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      else
      {
      sSwitchLevel = sBoxLevel + 1;
      nodes.push({id: sswitchNodeID, label: sswitchList[j].bridge, box: sboxList[i].boxID, level:sSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: sBoxNodeID, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      }
      //Draw Type O Boxes
      for (var oindex in oboxList)
      {
      console.log('    O-Box: '+oboxList[oindex].boxName+' '+oboxList[oindex].site);
      if (oboxList[oindex].site == sboxList[i].site && (oboxList[oindex].site == 'GIST' || oboxList[oindex].site == 'KN'))
      {
      oBoxNodeID = sBoxNodeID + 501;
      oBoxLevel = sSwitchLevel + 1;
      oswitchNodeID = oBoxNodeID + 1;
      console.log('    O-Box: '+oboxList[oindex].boxName+ ' NodeID: '+oBoxNodeID+ ' Level: '+oBoxLevel);
      if (oboxList[oindex].management_ip_status == 'GREEN')
      {
      nodes.push({id: oBoxNodeID, label: oboxList[oindex].boxName, image: DIR + 'boxgreen.png', shape: 'image', level:oBoxLevel, fixed: false, physics:false});
      edges.push({from: oBoxNodeID, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: oboxList[oindex].data_ip_status, label: ' '});
      //Draw Type O Switches
      for (var osindex in oswitchList)
      {
      if (oswitchList[osindex].boxDevType == 'KOREN'){
      for (var osstatusindex in oovsBridgeStatus)
      {
      if (oovsBridgeStatus[osstatusindex].bridge == oswitchList[osindex].bridge && oovsBridgeStatus[osstatusindex].boxID == oboxList[oindex].boxID )
      {
      BridgeLinkColor = oovsBridgeStatus[osstatusindex].status;
      BridgeNodeColor = oovsBridgeStatus[osstatusindex].status;
      //console.log(oovsBridgeStatus[osstatusindex].boxID + ' '+BridgeLinkColor);
      break;
      }
      }
      if (oswitchNodeID != oBoxNodeID + 1)
      {
      oSwitchLevel=oSwitchLevel + 1;
      oswitchNodeID = oBoxNodeID + 1;
      console.log('      O-Switch: '+oswitchList[osindex].bridge+ ' NodeID: '+oBoxNodeID+ ' Level: '+oBoxLevel);
      nodes.push({id: oswitchNodeID, label: oswitchList[osindex].bridge, box: oboxList[oindex].boxID, level:oSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: oswitchNodeID-1, to: oswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      else
      {
      oswitchNodeID = oBoxNodeID + 10;
      oSwitchLevel = oBoxLevel + 1;
      console.log('      O-Switch: '+oswitchList[osindex].bridge+ ' NodeID: '+oBoxNodeID+ ' Level: '+oBoxLevel);
      nodes.push({id: oswitchNodeID, label: oswitchList[osindex].bridge, box: oboxList[oindex].boxID, level:oSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: oBoxNodeID, to: oswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      }
      }
      //Draw IoT Hosts
      hostLevel = oSwitchLevel + 1;
      hostNodeID = oBoxNodeID + 14;
      var hostCheck=0;
      var instance='';
      for (var iotindex in iotHostList)
      {
      if (iotHostList[iotindex].boxID == oboxList[oindex].boxID)
      {
      hostNodeID = hostNodeID + 1;
      hostCheck = 1;
      console.log('        IoT Host: '+iotHostList[iotindex].hostID+ ' NodeID: '+hostNodeID+ ' Level: '+hostLevel);
      instance += iotHostList[iotindex].vlanid+'\\n';
      //nodes.push({id: hostNodeID, label: iotHostList[iotindex].vlanid, box: iotHostList[iotindex].boxID, level:hostLevel, image: DIR + 'iotdevice.png', shape: 'image', group: 'instance', title: iotHostList[iotindex].macaddress, fixed: false, physics:true});
      //edges.push({from: oswitchNodeID, to: hostNodeID, length: EDGE_LENGTH_SUB, color: GREEN, dashes: true});
      }
      }
      if (hostCheck != 0)
      {
      nodes.push({id: hostNodeID, label: instance, level:hostLevel, font: { multi: true }, image: DIR + 'iotdevice.png', shape: 'image', group: 'instance', title: iotHostList[iotindex].macaddress, fixed: false, physics:true});
      edges.push({from: oswitchNodeID, to: hostNodeID, length: EDGE_LENGTH_SUB, color: GREEN, dashes: true});
      }
      }
      else
      {
      nodes.push({id: oBoxNodeID, label: oboxList[oindex].boxName, image: DIR + 'boxred.png', shape: 'image', level:oBoxLevel, fixed: false, physics:false});
      edges.push({from: oBoxNodeID, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: oboxList[oindex].data_ip_status, label: ' '});
      }
      break;
      }
      }
      //Draw Type C Boxes
      for (var cindex in cboxList)
      {
      if (cboxList[cindex].site == sboxList[i].site)
      {
      console.log('    C-Box: '+cboxList[cindex].boxName+' '+cboxList[cindex].site);
      cBoxNodeID = sBoxNodeID + 10;
      cBoxLevel = sSwitchLevel + 1;
      cswitchNodeID = cBoxNodeID;
      if (cboxList[cindex].management_ip_status == 'GREEN')
      {
      nodes.push({id: cBoxNodeID, label: cboxList[cindex].boxName, image: DIR + 'boxgreen.png', shape: 'image', level:cBoxLevel, group: 'desktop', fixed: false, physics:false});
      edges.push({from: cBoxNodeID, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: cboxList[cindex].data_ip_status, label: ' '});
      //Draw Type C Switches
      for (var csindex in cswitchList)
      {
      console.log(cswitchList[csindex].bridge);
      for (var csstatusindex in covsBridgeStatus)
      {
      if (covsBridgeStatus[csstatusindex].bridge == cswitchList[csindex].bridge && covsBridgeStatus[csstatusindex].boxID == cboxList[cindex].boxID)
      {
      //console.log('Matched');
      BridgeLinkColor = covsBridgeStatus[csstatusindex].status;
      BridgeNodeColor = covsBridgeStatus[csstatusindex].status;
      //console.log(oovsBridgeStatus[osstatusindex].boxID + ' '+BridgeLinkColor);
      break;
      }
      }
      cswitchNodeID = cswitchNodeID + 1;
      var switchicon;
      if (BridgeNodeColor == 'GREEN')
      switchicon =  DIR + 'switchgreen.png';
      else if (BridgeNodeColor == 'RED')
      switchicon =  DIR + 'switchred.png';
      else if (BridgeNodeColor == 'ORANGE')
      switchicon =  DIR + 'switchorange.png';
      else
      switchicon =  DIR + 'switchgray.png';
      if (cswitchNodeID != cBoxNodeID + 1)
      {
      cSwitchLevel=cSwitchLevel + 1;
      console.log(switchicon);
      nodes.push({id: cswitchNodeID, label: cswitchList[csindex].bridge, box: cboxList[cindex].boxID, level:cSwitchLevel, image: switchicon, shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: cswitchNodeID-1, to: cswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      else
      {
      cSwitchLevel = cBoxLevel + 1;
      nodes.push({id: cswitchNodeID, label: cswitchList[csindex].bridge, box: cboxList[cindex].boxID, level:cSwitchLevel, image: switchicon, shape: 'image', fixed: false, physics:true});
      edges.push({from: cBoxNodeID, to: cswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      }
      //Draw OpenStack Instances
      instanceLevel = cSwitchLevel + 1;
      instanceNodeID = sBoxNodeID + 20;
      var instance = '', instanceCheck=0;
      for (var instanceindex in instanceList)
      {
      if (instanceList[instanceindex].boxID == cboxList[cindex].boxID)
      {
      instanceNodeID = instanceNodeID + 1;
      instance += instanceList[instanceindex].name+' ['+instanceList[instanceindex].state+']\n';
      //nodes.push({id: instanceNodeID, label: instanceList[instanceindex].name, box: instanceList[instanceindex].boxID, level:instanceLevel, image: ((instanceList[instanceindex].state == 'Running') ? DIR + 'instancegreen.png' : DIR + 'instancered.png'), shape: 'image', group: 'instance', title: 'Instance Details', fixed: false, physics:true});
      //edges.push({from: cswitchNodeID, to: instanceNodeID, length: EDGE_LENGTH_SUB, color: ((instanceList[instanceindex].state == 'Running') ? 'GREEN' : 'RED')});
      }
      }
      if (instanceCheck != 0)
      {
      nodes.push({id: instanceNodeID, font: { multi: true }, label: instance, level:instancelevel, box: instanceList[instanceindex].boxID, image: DIR + 'instancegreen.png', shape: 'image', group: 'instance', fixed: false, physics:false});
      edges.push({from: cswitchNodeID, to: instanceNodeID, length: EDGE_LENGTH_SUB, color: 'GREEN'});
      }
      }
      else
      {
      nodes.push({id: cBoxNodeID, label: cboxList[cindex].boxName, image: DIR + 'boxred.png', shape: 'image', level:cBoxLevel, fixed: false, physics:false});
      edges.push({from: cBoxNodeID, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: cboxList[cindex].data_ip_status, label: ' '});
      }
      break;
      }
      }
      }
      }
      else
      {
      nodes.push({id: sBoxNodeID, label: sboxList[i].boxName, image: DIR + 'boxred.png', shape: 'image', level:sBoxLevel, fixed: false, physics:false});
      edges.push({from: 1, to: sBoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: sboxList[i].data_ip_status, label: '0.71 mbps'});
      }
      }
      index=50
      //Draw OF@TEIN+ Boxes
      for (var i in bboxList)
      {
      index=index+1;
      bBoxNodeID = index * 1000;
      if (bboxList[i].management_ip_status == 'GREEN')
      {
      nodes.push({id: bBoxNodeID, label: bboxList[i].boxID, image: DIR + 'boxgreen.png', shape: 'image', level:bBoxLevel, fixed: false, physics:false});
      edges.push({from: 1, to: bBoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: bboxList[i].data_ip_status, label: '0.71 mbps'});
      console.log(bboxList[i].management_ip_status);
      //Draw the OVS Bridges
      bswitchNodeID = bBoxNodeID;
      for (var j in bswitchList)
      {
      if (bswitchList[j].bridge !== 'br-ex')
      {
      for (var a in bovsBridgeStatus)
      {
      if (bovsBridgeStatus[a].bridge == bswitchList[j].bridge && bovsBridgeStatus[a].box == bboxList[i].box)
      {
      if (bovsBridgeStatus[a].status == 'ORANGE')
      {
      BridgeLinkColor = 'ORANGE';
      BridgeNodeColor = 'ORANGE'
      console.log(bovsBridgeStatus[a].box + ' '+BridgeLinkColor);
      }
      else if (bovsBridgeStatus[a].status == 'DARKGRAY')
      {
      BridgeLinkColor = 'DARKGRAY';
      BridgeNodeColor = 'DARKGRAY'
      console.log(bovsBridgeStatus[a].box + ' '+BridgeLinkColor);
      }
      else if (bovsBridgeStatus[a].status == 'GREEN')
      {
      BridgeLinkColor = 'GREEN';
      BridgeNodeColor = 'GREEN'
      console.log(bovsBridgeStatus[a].box + ' '+BridgeLinkColor);
      }
      else
      {
      BridgeLinkColor='RED';
      BridgeNodeColor = 'RED'
      }
      break;
      }
      }
      bswitchNodeID = bswitchNodeID + 1;
      if (bswitchNodeID != bBoxNodeID + 1)
      {
      bSwitchLevel=bSwitchLevel + 1;
      nodes.push({id: bswitchNodeID, label: bswitchList[j].bridge,       box: bboxList[i].boxID, level:bSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: bswitchNodeID-1, to: bswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      else
      {
      bSwitchLevel = bBoxLevel + 1;
      nodes.push({id: bswitchNodeID, label: bswitchList[j].bridge, box: bboxList[i].boxID, level:bSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: bBoxNodeID, to: bswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      }
      }
      //Draw the OpenStack Instances
      vmNodeID       = bBoxNodeID+100;
      workloadNodeID = bBoxNodeID+600;
      instancelevel  = bSwitchLevel+1;
      var instance = '', instanceCheck=0;
      for (var k in instanceList)
      {
      if (bboxList[i].boxName == instanceList[k].box)
      {
      console.log('test');
      vmNodeID = vmNodeID + 1;
      instanceCheck = 1;
      if (instanceList[k].state == 'Running')
      {
      //instance += '<font size="3" color="green">'+instanceList[k].name+'</font>\\n';
      instance += instanceList[k].name+' ['+instanceList[k].state+']\n';
      //instance +=' <tspan style="color:green; text-shadow:0 0 20px #000000;">'+ instanceList[k].name+'</tspan>'
      console.log(instance);
      //nodes.push({id: vmNodeID, label: instanceList[k].name, box: instanceList[k].box, level:instancelevel, image: DIR + 'vmicongreen.png', shape: 'image', group: 'instance', title: 'Instance Details', fixed: false, physics:true});
      //edges.push({from: bswitchNodeID, to: vmNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      else
      {
      instance += instanceList[k].name+' ['+instanceList[k].state+']\n';
      //instance += '<font size="3" color="red">'+instanceList[k].name+'</font>\\n';
      //instance +=' <tspan style="color:red; text-shadow:0 0 20px #000000;">'+ instanceList[k].name+'</tspan>'
      //nodes.push({id: vmNodeID, label: instanceList[k].name, level:instancelevel, image: DIR + 'vmiconred.png', shape: 'image', group: 'instance', title: 'Instance Details', fixed: false, physics:true});
      //edges.push({from: bswitchNodeID, to: vmNodeID, length: EDGE_LENGTH_SUB, color: RED});
      }
      }
      }
      if (instanceCheck != 0)
      {
      /*var svg = '<svg xmlns="http://www.w3.org/2000/svg" width="200" height="80">' +
      '<rect x="0" y="0" width="100%" height="100%" style="fill:white;stroke:black;stroke-width:5"></rect>' +
      '<foreignObject x="15" y="10" width="100%" height="100%">' +
      '<div xmlns="http://www.w3.org/1999/xhtml" style="font-size:20px">' +
      instance +
      '</div>' +
      '</foreignObject>' +
      '</svg>';
      var url = "data:image/svg+xml;charset=utf-8,"+ encodeURIComponent(svg);*/
      nodes.push({id: vmNodeID, label: instance, level:instancelevel, font: { multi: true }, image: DIR + 'instancegreen.png', shape: 'image', group: 'instance', fixed: false, physics:false});
      //nodes.push({id: vmNodeID, level:instancelevel, shape: 'image', image: url, fixed: false, physics:false});
      edges.push({from: bswitchNodeID, to: vmNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      }
      else
      {
      nodes.push({id: bBoxNodeID, label: bboxList[i].boxID, image: DIR + 'boxred.png', shape: 'image', level:bBoxLevel, fixed: false, physics:false});
      edges.push({from: 1, to: bBoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: bboxList[i].data_ip_status, label: '0.71 mbps'});
      }
      }
      //Draw remaining Type O Boxes
      /*for (var oindex in oboxList)
      {
      console.log('    O-Box: '+oboxList[oindex].boxName+' '+oboxList[oindex].site);
      if (oboxList[oindex].site == sboxList[i].site)
      {
      oBoxNodeID = sBoxNodeID + 501;
      oBoxLevel = sSwitchLevel + 1;
      oswitchNodeID = oBoxNodeID + 1;
      console.log('    O-Box: '+oboxList[oindex].boxName+ ' NodeID: '+oBoxNodeID+ ' Level: '+oBoxLevel);
      if (oboxList[oindex].management_ip_status == 'GREEN')
      {
      nodes.push({id: oBoxNodeID, label: oboxList[oindex].boxName, image: DIR + 'boxgreen.png', shape: 'image', level:oBoxLevel, fixed: false, physics:false});
      edges.push({from: oBoxNodeID, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: oboxList[oindex].data_ip_status, label: ' '});
      //Draw Type O Switches
      for (var osindex in oswitchList)
      {
      for (var osstatusindex in oovsBridgeStatus)
      {
      if (oovsBridgeStatus[osstatusindex].bridge == oswitchList[osindex].bridge && oovsBridgeStatus[osstatusindex].boxID == oboxList[oindex].boxID)
      {
      BridgeLinkColor = oovsBridgeStatus[osstatusindex].status;
      BridgeNodeColor = oovsBridgeStatus[osstatusindex].status;
      break;
      }
      }
      if (oswitchNodeID != oBoxNodeID + 1)
      {
      oSwitchLevel=oSwitchLevel + 1;
      oswitchNodeID = oBoxNodeID + 1;
      console.log('      O-Switch: '+oswitchList[osindex].bridge+ ' NodeID: '+oBoxNodeID+ ' Level: '+oBoxLevel);
      nodes.push({id: oswitchNodeID, label: oswitchList[osindex].bridge, box: oboxList[oindex].boxID, level:oSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: oswitchNodeID-1, to: oswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      else
      {
      oswitchNodeID = oBoxNodeID + 10;
      oSwitchLevel = oBoxLevel + 1;
      console.log('      O-Switch: '+oswitchList[osindex].bridge+ ' NodeID: '+oBoxNodeID+ ' Level: '+oBoxLevel);
      nodes.push({id: oswitchNodeID, label: oswitchList[osindex].bridge, box: oboxList[oindex].boxID, level:oSwitchLevel, image: ((BridgeNodeColor == 'GREEN') ? DIR + 'switchgreen.png' : DIR + 'switchred.png'), shape: 'image', group: 'desktop', fixed: false, physics:true});
      edges.push({from: oBoxNodeID, to: oswitchNodeID, length: EDGE_LENGTH_SUB, color: BridgeLinkColor});
      }
      }
      //Draw IoT Hosts
      hostLevel = oSwitchLevel + 1;
      hostNodeID = oBoxNodeID + 14;
      for (var iotindex in iotHostList)
      {
      if (iotHostList[iotindex].boxID == oboxList[oindex].boxID)
      {
      hostNodeID = hostNodeID + 1;
      console.log('        IoT Host: '+iotHostList[iotindex].hostID+ ' NodeID: '+hostNodeID+ ' Level: '+hostLevel);
      nodes.push({id: hostNodeID, label: iotHostList[iotindex].vlanid, box: iotHostList[iotindex].boxID, level:hostLevel, image: DIR + 'iotdevice.png', shape: 'image', group: 'instance', title: iotHostList[iotindex].macaddress, fixed: false, physics:true});
      edges.push({from: oswitchNodeID, to: hostNodeID, length: EDGE_LENGTH_SUB, color: GREEN, dashes: true});
      }
      }
      }
      else
      {
      nodes.push({id: oBoxNodeID, label: oboxList[oindex].boxName, image: DIR + 'boxred.png', shape: 'image', level:oBoxLevel, fixed: false, physics:false});
      edges.push({from: oBoxNodeID, to: sswitchNodeID, length: EDGE_LENGTH_SUB, color: oboxList[oindex].data_ip_status, label: ' '});
      }
      break;
      }
      }*/
      //Generate HTML for Controllers
      var rows='';
      for( var controller in controllerList )
      {
      var color = controllerList[controller].controllerStatus;
      console.log(rows);
      rows += '<tr><td style=color:'+color+';>'+controllerList[controller].controllerName+'</td></tr>';
      }
      document.getElementById( 'controllertable' ).innerHTML = rows;
      // legend
      var mynetwork = document.getElementById('mynetwork');
      var x = - mynetwork.clientWidth / 2 + 50;
      var y = - mynetwork.clientHeight / 2 + 50;
      var step = 70;
      // create a visualization network
      var container = document.getElementById('mynetwork');
      var data = {
      nodes: nodes,
      edges: edges
      };
      var options = {
      nodes: {
      //shape: 'dot',
      size: 20,
      borderWidth: 2,
      font: {
      size: 16,
      color: '#000000'
      },
      scaling: {
      min: 16,
      max: 32,
      }
      },
      edges: {
      color: GRAY,
      smooth: false,
      width: 2
      },
      layout: {
      hierarchical: {
      enabled:true,
      levelSeparation: 150,
      nodeSpacing: 240,
      direction: "DU",
      blockShifting: true,
      edgeMinimization: true,
      parentCentralization: true
      }
      },
      physics:{
      barnesHut:{gravitationalConstant:-30000},
      stabilization: {iterations:2500}
      },
      interaction: {
      navigationButtons: true,
      hover: true,
      keyboard: true
      },
      groups: {
      'switch': {
      shape: 'triangle',
      color: '#FF9900' // orange
      },
      instance: {
      shape: 'square',
      //color: "#C5000B" // blue
      font: {
      bold: {
      color: 'RED'
      }
      }
      }
      }
      };
      network = new vis.Network(container, data, options);
      network.on("click", function (params){
      console.log(params);
      params.event = "[original event]";
      if(params.nodes == ""){
      }
      else
      {
      var nodeId = params.nodes;
      //stupid
      for(var i=0; i<nodes.length; i++){
      if(nodes[i].id == nodeId){
      switch (nodes[i].level){
      case 1: //Box
      window.parent.receiveValueBox(nodes[i]);
      break;
      case 2: // brcap
      window.parent.receiveValueBrCapflow(nodes[i]);
      break;
      case 3: // brdev
      break;
      case 4: // brvlan
      break;
      case 5: // brint
      break;
      case 6: // vm
      window.parent.receiveValueVMflow(nodes[i])
      break;
      case 7: // service
      break;
      }
      break;
      }
      }
      }
      });
      var myInput = $("#mynetwork");
      var inputOpentip = new Opentip(myInput, { showOn: null, style: 'glass' });
      var count = 0;
      network.on("hoverNode", function (params){
      params.event = "[original event]";
      var nodeId = params.node;
      for(var i=0; i<nodes.length; i++){
      if(nodes[i].id == nodeId){
      count = i;
      break;
      }
      }
      inputOpentip.setContent("Node label: "+ nodes[count].label +" Id: "+ nodes[count].id);
      inputOpentip.show();
      });
      network.on("blurNode", function (params){
      inputOpentip.hide();
      });
      }
  body(onload='draw()')
    p
    p
    #mynetwork(align='center')
    .sdncontrollerdiv
      .sdncontrollerheaddiv(style='color:white;font-family:verdana;text-align:center;') Plaground Controllers
      .sdncontrollerbodydiv
        table#controllertable(style='width:100%;color:black;text-align:center;')
          tbody
