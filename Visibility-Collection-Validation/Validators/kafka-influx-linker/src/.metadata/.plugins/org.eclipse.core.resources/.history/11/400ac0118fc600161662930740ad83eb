package chainlinker;

import java.io.InvalidClassException;
import java.util.HashMap;
import java.util.Set;

/*
 * This class serve as a template for all Snap plugin parsers.
 */
public abstract class SnapPluginParser {
	
	LinkedList<Backend> backends = ConfigLoader.getInstance().getBackends();
	
	Long lValue = 0L;
	Double lfValue = 0.0;
	String sValue = "";
	Boolean bValue = false;
	
	// These are dummy objects to provide class information.
	@SuppressWarnings("rawtypes")
	Class lClass = lValue.getClass();
	@SuppressWarnings("rawtypes")
	Class lfClass = lfValue.getClass();	
	@SuppressWarnings("rawtypes")
	Class sClass = sValue.getClass();	
	@SuppressWarnings("rawtypes")
	Class bClass = bValue.getClass();	
	
	@SuppressWarnings("rawtypes")
	HashMap<String, Class> typeMap = new HashMap<>();
	@SuppressWarnings("rawtypes")
	HashMap<String, Class> regexTypeMap = new HashMap<>();
	Set<String> regexSet = null;
	
	public void loadParserMap(HashMap<String, SnapPluginParser> map) {
		for (String dataName : typeMap.keySet()) {
			map.put(dataName, this);
		}
	}
	
	// This method is to describe how the parser will feed the given data into pointBuilder.
	public void addField(
			Object metricObject, 
			String dataTypeName, 
			Object data
			) throws ClassNotFoundException, InvalidClassException {
		backend.addField(metricObject, dataTypeName, data, this);
	}	
	
	// This method is to describe whether the parser is able to handle data with the given name.
	// This exists to handle data with parameterized names.
	public boolean isParsible(String dataTypeName) {
		if (typeMap.get(dataTypeName) != null) {
			return true;			
		} 
		else if (regexSet == null) return false;
		else {
			boolean regexMatched = false;
			for (String regex : regexSet) {
				if (dataTypeName.matches(regex)) {
					regexMatched = true;
					break;
				}
			}
			if (regexMatched) {
				return true;
			}
			return false;			
		}
	}	
}