import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

// Referenced site: https://blog.seotory.com/post/2016/03/java-singleton-pattern

public class PSUtilParserPref {
	private static PSUtilParserPref instance = new PSUtilParserPref();
	
	@SuppressWarnings("rawtypes")
	private HashMap<String, Class> TypeMap_internal;
	@SuppressWarnings("rawtypes")
	public Map<String, Class> TypeMap;
	
	private PSUtilParserPref () {		
		TypeMap_internal = new HashMap<>();
		Long lValue = 0L;
		Double lfValue = 0.0;
		Class<Long> lClass = lValue.getClass();
		Class<Double> lfClass = Double.TYPE;
		
		// PSUtilParser's every settings must be written here.
		TypeMap_internal.put("intel/psutil/load/load1", lfClass);
		TypeMap_internal.put("intel/psutil/load/load5", lfClass);
		TypeMap_internal.put("intel/psutil/load/load15", lfClass);
		TypeMap_internal.put("intel/psutil/vm/free", lClass);
		TypeMap_internal.put("intel/psutil/vm/used", lClass);
		TypeMap_internal.put("intel/psutil/vm/available", lClass);
		// Setting part ends
		
		this.TypeMap = Collections.unmodifiableMap(TypeMap_internal);
	}
	
	public static PSUtilParserPref getInstance () {
		return instance;
	}
	
	public void print () {
//		System.out.println("It's print() method in EagerInitialization instance.");
//		System.out.println("instance hashCode > " + instance.hashCode());
	}
}
