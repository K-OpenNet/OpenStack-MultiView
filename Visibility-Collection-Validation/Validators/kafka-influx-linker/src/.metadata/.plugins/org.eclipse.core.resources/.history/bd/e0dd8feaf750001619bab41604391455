import java.util.Iterator;
import java.util.StringJoiner;
import java.util.concurrent.TimeUnit;

import org.influxdb.dto.Point;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/*
 * Corresponding to snap-plugin-collector-psutil
 * 
 * CAUTION: This parser may fail in case if the plugins' version mismatch with the below.
 * - collector:psutil:6
 * - publisher:kafka:7
 * 
 */
public class SnapPSUtilParser extends SnapPluginParser {
	public Point parse(JSONObject dataObj) throws NullPointerException {
		
		// name, source, unit, time, value
		
		// Extraction of name. String name will be the measurement in influxDB.
		JSONArray namespace = (JSONArray)dataObj.get("namespace");
		StringJoiner nameSJ = new StringJoiner("/", "", "");
		@SuppressWarnings("unchecked")
		Iterator<JSONObject> namespace_iterator = namespace.iterator();
		while (namespace_iterator.hasNext()) {
			nameSJ.add(namespace_iterator.next().get("Value").toString());
		}
		String name = nameSJ.toString();
		
		// Extraction of source.
		String source = (String)((JSONObject)dataObj.get("tags")).get("plugin_running_on");
		
		// Extraction of unit.
		String unit = (String)dataObj.get("Unit_");
		
		// Extraction of time.
		String timestamp = (String)dataObj.get("timestamp");
		long time = RFC3339toNSConvertor.ToNS(timestamp);
		
		// Time sout for debugging
		System.out.println("Time : " + timestamp + " = " + time);
		
		org.influxdb.dto.Point.Builder builder = Point.measurement(name)
							.time(time, TimeUnit.NANOSECONDS)
		                    .tag("source", source)
		                    .tag("unit", unit);
		
		PSUtilParserPref parserPref = PSUtilParserPref.getInstance();
		
		// Dummy value objects for class type infer 
		Long lValue = 0L;
		Double lfValue = 0.0;
		
		// NOTE:
		// I'm still getting familiar with Java, but if there're anyone knows it better than me,
		// please fix this. I think this part can be better than this.
		
		// TODO: Check if this work well with multiple types of data.
		ReflectivePointFieldFeeder.addField(
				builder, parserPref.TypeMap.get(name), dataObj.get("data"));
				
		return builder.build();
	}
}
