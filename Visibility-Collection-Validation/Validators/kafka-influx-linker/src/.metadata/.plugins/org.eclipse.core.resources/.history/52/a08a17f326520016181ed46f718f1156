import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.StringJoiner;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class ConfigLoader {	
	private static ConfigLoader instance = makeInstance();
	private static ConfigLoader makeInstance() {
		ConfigLoader conf;
		try {
			conf = new ConfigLoader();
		   } catch (IOException e1) {
			   System.out.println("Failed to open config file. Is it in proper place? The file's full path must be \"~/kafka/.Kafka-InfluxDB-Chain\".");
			   e1.printStackTrace();
			   conf = null;
		   } catch (ParseException e1) {
			   System.out.println("The config file is found, but JSONParser failed to parse it. Is it in proper form?");
			   e1.printStackTrace();
			   return;
		   } catch (NullPointerException e1) {
			   // Error message is embedded in the throwable.
			   e1.printStackTrace();
			   return;		   
		   }
		return conf;
	}
	
	protected KafkaConfig kafka;
	public class KafkaConfig {
		private String bootstrap_servers;
		private String topic_name;
		private String group_id;
		private String auto_commit;
		private String auto_commit_interval_ms;
		private String session_timeout_ms;
		private String key_deserializer;
		private String value_deserializer;
		
		public String getBootstrapServers() {
			return bootstrap_servers;
		}
		public String getTopicName() {
			return topic_name;
		}
		public String getGroupID() {
			return group_id;
		}
		public String getAutoCommit() {
			return auto_commit;
		}
		public String getAutoCommitIntervalMS() {
			return auto_commit_interval_ms;
		}
		public String getSessionTimeoutMS() {
			return session_timeout_ms;
		}
		public String getKeyDeserializer() {
			return key_deserializer;
		}
		public String getValueDeserializer() {
			return value_deserializer;
		}
	}
	
	protected InfluxDBConfig influxdb;
	public class InfluxDBConfig {
		private String address;
		private String id;
		private String password;
		private String db_name;
		private String retention_policy;
		private String consistency_level;
		
		public String getAddress() {
			return address;
		}
		public String getID() {
			return id;
		}
		public String getPassword() {
			return password;
		}
		public String getDBName() {
			return db_name;
		}
		public String getRetentionPolicy() {
			return retention_policy;
		}
		public String getConsistencyLevel() {
			return consistency_level;
		}
	}
	
	public ConfigLoader() throws IOException, ParseException, NullPointerException {
		load();
	}
	
	// This is to make text of the object in JSON that error occurred for error message.
	LinkedList<String> hierachy_header = new LinkedList<>();

	/*
	 * Reading the config file. The file must be in JSON style.
	 * 
	 * Config file full path : ~/kafka/.Kafka-InfluxDB-Chain
	 */
	protected void load() throws IOException, ParseException, NullPointerException {
		
	   // Loading entire JSON file
	   JSONObject config_all_json;
	   JSONParser parser = new JSONParser();
	   Object obj = parser.parse(new FileReader(
			   System.getProperty( "user.home" ) + "/kafka/.Kafka-InfluxDB-Chain"));
	   config_all_json = (JSONObject) obj;
		   
		// Loading part for Kafka configuration
	   JSONObject config_kafka_json;
	   config_kafka_json = (JSONObject)getValue(config_all_json, "kafka");
	     	   
	   kafka = new KafkaConfig();
	   hierachy_header.add("kafka");
	   kafka.topic_name = (String)getValue(config_kafka_json, "topic");
	   
	   @SuppressWarnings("unchecked")
	   Iterator<String> iterator = ((JSONArray)getValue(config_kafka_json, "bootstrap.servers")).iterator();
	   StringJoiner brokerSJ = new StringJoiner(";", "", "");
	   while (iterator.hasNext()) {
		   brokerSJ.add(iterator.next());
	   }
	   kafka.bootstrap_servers = brokerSJ.toString();
	   
	   kafka.group_id = (String)getValue(config_kafka_json, "group.id");
	   kafka.auto_commit = (String)getValue(config_kafka_json, "enable.auto.commit");
	   kafka.auto_commit_interval_ms = ((Long)getValue(config_kafka_json, "auto.commit.interval.ms")).toString();
	   kafka.session_timeout_ms = ((Long)getValue(config_kafka_json, "session.timeout.ms")).toString();
	   kafka.key_deserializer = (String)getValue(config_kafka_json, "key.deserializer");
	   kafka.value_deserializer = (String)getValue(config_kafka_json, "value.deserializer");
	   
	   hierachy_header.removeLast();
	   
	   // Loading part for InfluxDB
	   JSONObject config_influx_json;
	   hierachy_header.add("influxdb");
	   config_influx_json = (JSONObject)getValue(config_all_json, "influxdb");
	   
	   influxdb = new InfluxDBConfig();
	   influxdb.address = (String)getValue(config_influx_json, "address");
	   influxdb.id = (String)getValue(config_influx_json, "id");
	   influxdb.password = (String)getValue(config_influx_json, "password");
	   influxdb.db_name = (String)getValue(config_influx_json, "db_name");
	   influxdb.retention_policy = (String)getValue(config_influx_json, "retention_policy");
	   influxdb.consistency_level = (String)getValue(config_influx_json, "consistency_level");
	   
	   hierachy_header.removeLast();
	}
	
	KafkaConfig getKafkaConfig() {
		return kafka;
	}
	
	/*
	 * This method is intended for checking validity of the given setting.
	 * 
	 * Currently, this checks only whether required value exists.
	 * TODO: Make this also check each value's syntax.
	 */
	protected Object getValue(JSONObject json, String key) throws NullPointerException {
		Object value = json.get(key);
		if (value == null) throw new NullPointerException ("Config file's '" + String.join(":", hierachy_header) + ":" + key + "' is missing.");
		return value;
	}
}
