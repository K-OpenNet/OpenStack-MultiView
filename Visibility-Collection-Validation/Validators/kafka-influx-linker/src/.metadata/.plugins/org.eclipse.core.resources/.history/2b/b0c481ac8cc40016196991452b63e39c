package chainlinker;

import java.util.Iterator;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.influxdb.InfluxDB;
import org.influxdb.InfluxDBFactory;
import org.influxdb.InfluxDB.ConsistencyLevel;
import org.influxdb.dto.BatchPoints;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;

public class BackendInfluxDB extends Backend {
	private static final Logger logger = LogManager.getLogger(BackendInfluxDB.class);	
	
	private InfluxDBConfig influxdb;
	// Nested class to store and provice read-only access to InfluxDB-related setting values.
	public class InfluxDBConfig {
		private String address;
		private String id;
		private String password;
		private String db_name;
		private String retention_policy;
		private ConsistencyLevel consistency_level;

		public String getAddress() {
			return address;
		}
		public String getID() {
			return id;
		}
		public String getPassword() {
			return password;
		}
		public String getDBName() {
			return db_name;
		}
		public String getRetentionPolicy() {
			return retention_policy;
		}
		public ConsistencyLevel getConsistencyLevel() {
			return consistency_level;
		}
	}
	
	@Override
	public InfluxDBConfig getConfig() {
		return influxdb;
	}
	
	@Override
	public void loadConfig(JSONObject config_influx_json) throws ParseException {
		influxdb = new InfluxDBConfig();
		influxdb.address = (String)ConfigLoader.getValue(config_influx_json, "address");
		influxdb.id = (String)ConfigLoader.getValue(config_influx_json, "id");
		influxdb.password = (String)ConfigLoader.getValue(config_influx_json, "password");
		influxdb.db_name = (String)ConfigLoader.getValue(config_influx_json, "db_name");
		influxdb.retention_policy = (String)ConfigLoader.getValue(config_influx_json, "retention_policy");
		influxdb.consistency_level = getConsistencyLevel(config_influx_json);
	};
	
	public void processMessage(JSONArray msgValue) {
		// Creating InfluxDB instance to handle InfluxDB connection
		logger.trace("Opening a connection to InfluxDB server " + influxDBConf.getAddress() + " with ID " + influxDBConf.getID() + ".");
		InfluxDB influxDB = InfluxDBFactory.connect(influxDBConf.getAddress(), influxDBConf.getID(), influxDBConf.getPassword());
		
		String dbName = influxDBConf.getDBName();
		influxDB.createDatabase(dbName); // This will be ignored by InfluxDB if already the DB exists

		// Only 1 query are sent to the DB per 1 Kafka message by batching points.
		logger.trace("Setting up a BatchPoints...");
		BatchPoints batchPoints = BatchPoints
				.database(dbName)
				.retentionPolicy(influxDBConf.getRetentionPolicy())
				.consistency(influxDBConf.getConsistencyLevel())
				.build();				

		@SuppressWarnings("unchecked")
		Iterator<JSONObject> msg_iterator = msgValue.iterator();
		logger.trace("Processing a message with " + msgValue.size() + " elements.");
		int count = 1;
		while (msg_iterator.hasNext()) { // For each data element
			logger.trace("Processing the element #" + count + ".");
			JSONObject dataObj = msg_iterator.next();
			try {
				batchPoints.point(parse(dataObj));
			} catch (NullPointerException e) {
				e.printStackTrace();						
			} catch (ClassNotFoundException e) {
				logger.error("Failed to find data type info for given data with field name '" + e.getMessage() + "'", e);
			}
			count++;
		}

		influxDB.write(batchPoints);
	}
	
	// InfluxDB's ConsistencyLevel requires a different approach as it is not a String.
	protected ConsistencyLevel getConsistencyLevel(JSONObject json) throws ParseException {
		String lvl_str = ((String)ConfigLoader.getValue(json, "consistency_level")).toLowerCase();
		switch (lvl_str) {
		case "all" :
			return ConsistencyLevel.ALL;
		default:
//			throw new ParseException(0, "Failed to parse '" + String.join(":", ConfigLoader.hierachy_header) + ":consistency_level.");
			throw new ParseException(0);
		}
	}

}
